name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  php-lint:
    name: PHP Syntax Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: pdo, pdo_mysql, json, gd
        coverage: none

    - name: Validate composer.json
      working-directory: ./server
      run: composer validate --strict

    - name: Check PHP syntax errors
      working-directory: ./server
      run: find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \;

  composer-dependencies:
    name: Composer Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: pdo, pdo_mysql, json, gd
        coverage: none

    - name: Get Composer Cache Directory
      id: composer-cache
      working-directory: ./server
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer packages
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      working-directory: ./server
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Check autoload
      working-directory: ./server
      run: composer dump-autoload --optimize

  database-validation:
    name: Database Schema Validation
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: pdgp_test
          MYSQL_USER: pdgp_user
          MYSQL_PASSWORD: pdgp_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Wait for MySQL to be ready
      run: |
        for i in {1..30}; do
          if mysqladmin ping -h"127.0.0.1" -P3306 -uroot -prootpassword --silent; then
            echo "MySQL is ready"
            break
          fi
          echo "Waiting for MySQL... ($i/30)"
          sleep 2
        done

    - name: Test MySQL connection
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -prootpassword -e "SELECT VERSION();"

    - name: Run schema migration
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -prootpassword pdgp_test < server/database/schema.sql

    - name: Verify tables created
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -prootpassword pdgp_test -e "SHOW TABLES;"

    - name: Run seed data
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -prootpassword pdgp_test < server/database/seed.sql

    - name: Validate database structure
      run: |
        echo "Checking users table..."
        mysql -h 127.0.0.1 -P 3306 -u root -prootpassword pdgp_test -e "DESCRIBE users;"
        
        echo "Checking sites table..."
        mysql -h 127.0.0.1 -P 3306 -u root -prootpassword pdgp_test -e "DESCRIBE sites;"
        
        echo "Checking products table..."
        mysql -h 127.0.0.1 -P 3306 -u root -prootpassword pdgp_test -e "DESCRIBE products;"
        
        echo "Checking uploads table..."
        mysql -h 127.0.0.1 -P 3306 -u root -prootpassword pdgp_test -e "DESCRIBE uploads;"
        
        echo "Checking generated_packages table..."
        mysql -h 127.0.0.1 -P 3306 -u root -prootpassword pdgp_test -e "DESCRIBE generated_packages;"

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: pdgp_test
          MYSQL_USER: pdgp_user
          MYSQL_PASSWORD: pdgp_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: pdo, pdo_mysql, json, gd
        coverage: none

    - name: Install Composer dependencies
      working-directory: ./server
      run: composer install --prefer-dist --no-progress

    - name: Setup test database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -prootpassword pdgp_test < server/database/schema.sql
        mysql -h 127.0.0.1 -P 3306 -u root -prootpassword pdgp_test < server/database/seed.sql

    - name: Create storage directories
      run: |
        mkdir -p server/storage/assets
        mkdir -p server/storage/packages
        mkdir -p server/storage/temp
        chmod -R 777 server/storage

    - name: Test PHP application bootstrap
      working-directory: ./server
      env:
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_NAME: pdgp_test
        DB_USER: root
        DB_PASSWORD: rootpassword
        JWT_SECRET: test-secret-key-for-ci-testing
      run: php -r "require 'vendor/autoload.php'; echo 'Application bootstrap successful\n';"

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build PHP-FPM Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./server
        file: ./server/Dockerfile
        push: false
        tags: pdgp-php:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create .env file for testing
      run: |
        cat > .env << EOF
        DB_HOST=mysql
        DB_PORT=3306
        DB_NAME=pdgp_test
        DB_USER=pdgp_user
        DB_PASSWORD=pdgp_password
        DB_ROOT_PASSWORD=rootpassword
        JWT_SECRET=test-secret-key-for-docker-testing
        EOF

    - name: Test Docker Compose configuration
      run: docker-compose config

    - name: Start Docker Compose services
      run: docker-compose up -d

    - name: Wait for services to be ready
      run: |
        echo "Waiting for services to be ready..."
        sleep 30
        docker-compose ps

    - name: Check MySQL service
      run: |
        docker-compose exec -T mysql mysqladmin ping -h localhost -u root -prootpassword || exit 1

    - name: Check PHP-FPM service
      run: |
        docker-compose exec -T php php -v

    - name: Check Nginx service
      run: |
        curl -f http://localhost:8080 || echo "Nginx is running (may return 404 for root)"

    - name: Verify database tables
      run: |
        docker-compose exec -T mysql mysql -u root -prootpassword pdgp_test -e "SHOW TABLES;"

    - name: Check application logs
      if: always()
      run: |
        echo "=== Nginx Logs ==="
        docker-compose logs nginx
        echo "=== PHP Logs ==="
        docker-compose logs php
        echo "=== MySQL Logs ==="
        docker-compose logs mysql

    - name: Stop Docker Compose services
      if: always()
      run: docker-compose down -v

  security-check:
    name: Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: pdo, pdo_mysql, json, gd
        coverage: none

    - name: Check for security vulnerabilities in composer dependencies
      working-directory: ./server
      run: |
        composer audit || true

    - name: Check file permissions
      run: |
        echo "Checking for files with overly permissive permissions..."
        find . -type f -perm /111 -not -path "./.git/*" -not -path "./server/vendor/*" -not -name "*.sh" -not -name "*.bat" || true

    - name: Check for sensitive data patterns
      run: |
        echo "Checking for potential sensitive data..."
        ! grep -r -i "password.*=" --include="*.php" --include="*.js" --exclude-dir=vendor server/ || true
        ! grep -r -i "api_key.*=" --include="*.php" --include="*.js" --exclude-dir=vendor server/ || true

